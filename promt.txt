# PROMPT PARA CLAUSONET4 / CLOUDZONET 4

> **Objetivo**: En el *repositorio remoto actual*, crear una nueva rama y desarrollar la funcionalidad **NatBar** con **4 vistas** (Vista 1–4) navegables entre sí, **sin perder estado**, manteniendo el flujo ya existente de **guardar ficha**, **recuperar ficha** y **generar PDF**. El **PDF** debe contener las 4 vistas **una debajo de la otra en ese orden**. Las **Vistas 2–4** deben mantener **el mismo formato de cabecera** de la ficha actual. Todos los **datos se cargan en la Vista 1** y se **consumen en las 4 vistas**.

---

## 1) Preparación y rama de trabajo

* Usar el *repositorio remoto actual* (`origin`).
* Crear rama **`creacion-NatBar`**:

  ```bash
  git fetch origin
  git checkout -b creacion-NatBar origin/main
  git branch -u origin/main
  ```
* Confirmar que la rama se publica en remoto y tiene un commit inicial.

---

## 2) Alcance funcional

* **NatBar** será visible desde cualquier vista de la app.
* **Cuatro componentes independientes** para cada vista:

  * `Vista1` (vista actual)
  * `Vista2` (nueva)
  * `Vista3` (nueva)
  * `Vista4` (nueva)
* **Cabecera compartida** en todas las vistas (según primera imagen que se compartirá).
* **Cuerpo de cada vista**:

  * Vista 2: Contenido según segunda imagen.
  * Vista 3: Contenido según tercera imagen.
  * Vista 4: Contenido según cuarta imagen.
* Cada vista tendrá un **espacio para subida de imágenes**.
* Mantener persistencia de datos al navegar.
* PDF con las 4 vistas unificadas, en orden.

---

## 3) Navegación y visibilidad

* Agregar acceso global a **NatBar**.
* Definir rutas:

  * `/natbar/v1`
  * `/natbar/v2`
  * `/natbar/v3`
  * `/natbar/v4`
* Botones o tabs para moverse entre vistas sin perder estado.

---

## 4) Estado y persistencia

* Centralizar estado en un **Store global**.
* Inicializar estado al entrar a `/natbar/v1`.
* Guardar respaldo automático en `sessionStorage` o `localStorage`.
* Cabecera como **componente reutilizable**.

---

## 5) Estructura de archivos

```
src/features/natbar/
  index.js
  state/natbarStore.js
  components/CabeceraFicha.jsx
  views/Vista1.jsx
  views/Vista2.jsx
  views/Vista3.jsx
  views/Vista4.jsx
  pdf/buildNatbarPdf.js
```

---

## 6) Guardar, recuperar y PDF

* Guardar y recuperar reutilizando el flujo actual.
* Generar un único PDF con las 4 vistas.
* Cada sección reflejará datos y cabecera correctamente.

---

## 7) Experiencia de usuario

* Feedback en guardar y recuperar.
* Confirmación al salir con cambios sin guardar.
* Navegación accesible con teclado.

---

## 8) Permisos y seguridad

* Mantener permisos actuales.
* Feature flag `feature.natbar=true` para pruebas si aplica.

---

## 9) Pruebas funcionales

1. Crear ficha en Vista 1, navegar entre vistas y verificar persistencia.
2. Guardar ficha desde cualquier vista.
3. Recuperar ficha y validar datos en todas las vistas.
4. Generar PDF y comprobar vistas en orden.
5. Subir imágenes en cada vista y validar que se guardan.

---

## 10) Criterios de aceptación

* Rama creada y publicada.
* Navegación funcional y persistente.
* Cabecera uniforme en todas las vistas.
* Espacios de subida de imágenes habilitados.
* PDF con contenido de las cuatro vistas.

---

## 11) Commits sugeridos

* `chore: inicia rama creacion-NatBar`
* `feat(natbar): entrypoint y ruteo`
* `feat(natbar): store global`
* `feat(natbar): cabecera reusable`
* `feat(natbar): vistas 2, 3 y 4`
* `feat(natbar): espacio para subida de imágenes`
* `feat(natbar): generador de PDF`
* `docs(natbar): documentación`

---


