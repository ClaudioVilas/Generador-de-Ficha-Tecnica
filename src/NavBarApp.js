/**
 * ============================================
 * NAVBARAPP - CONTROLADOR PRINCIPAL DEL SISTEMA NAVBAR
 * ============================================
 * 
 * PROP√ìSITO:
 * NavBarApp es el controlador principal que orquesta todo el sistema NavBar moderno.
 * Act√∫a como punto central de coordinaci√≥n entre componentes, gesti√≥n de datos,
 * vistas y eventos de la aplicaci√≥n.
 * 
 * ARQUITECTURA:
 * - Singleton Pattern: Una sola instancia por aplicaci√≥n
 * - Component Orchestrator: Coordina NavBar, ViewManager y DataManager
 * - Event Hub: Maneja comunicaci√≥n entre componentes
 * - State Manager: Gestiona el estado global de la aplicaci√≥n
 * 
 * RESPONSABILIDADES:
 * 1. Inicializaci√≥n y destrucci√≥n del sistema
 * 2. Coordinaci√≥n entre NavBar, ViewManager y DataManager
 * 3. Gesti√≥n de estilos y estructura HTML
 * 4. Manejo de eventos globales
 * 5. Preservaci√≥n y restauraci√≥n del contenido original
 * 
 * FLUJO DE INICIALIZACI√ìN:
 * init() ‚Üí saveOriginalContent() ‚Üí createAppStructure() ‚Üí loadStyles() ‚Üí 
 * initializeComponents() ‚Üí setupEvents() ‚Üí loadSavedData() ‚Üí ready
 * 
 * @class NavBarApp
 * @version 1.0.0
 * @author Sistema NavBar
 */
class NavBarApp {
    /**
     * Constructor de NavBarApp
     * 
     * INICIALIZACI√ìN:
     * - Establece valores por defecto para todos los componentes
     * - No ejecuta l√≥gica pesada (se hace en init())
     * - Prepara las propiedades de estado
     * 
     * PROPIEDADES DE ESTADO:
     * @property {NavBar|null} navbar - Instancia del componente NavBar
     * @property {ViewManager|null} viewManager - Gestor de vistas (Vista1-4)
     * @property {DataManager|null} dataManager - Gestor de datos y persistencia
     * @property {boolean} initialized - Estado de inicializaci√≥n completa
     * @property {string|null} originalContent - HTML original para restauraci√≥n
     */
    constructor() {
        console.log('üèóÔ∏è Construyendo nueva instancia de NavBarApp...');
        
        // Componentes principales del sistema
        this.navbar = null;          // Componente de navegaci√≥n
        this.viewManager = null;     // Gestor de vistas modernas  
        this.dataManager = null;     // Gestor de datos y persistencia
        
        // Estado de la aplicaci√≥n
        this.initialized = false;    // Flag de inicializaci√≥n completa
        this.originalContent = null; // Contenido HTML original para restauraci√≥n
        
        console.log('‚úÖ Instancia NavBarApp creada, lista para inicializaci√≥n');
    }

    /**
     * Inicializa completamente la aplicaci√≥n NavBar
     * 
     * PROCESO DE INICIALIZACI√ìN:
     * 1. Preserva el contenido HTML original de la p√°gina
     * 2. Crea la estructura HTML del sistema NavBar
     * 3. Carga estilos CSS espec√≠ficos del NavBar
     * 4. Inicializa todos los componentes (NavBar, ViewManager, DataManager)
     * 5. Configura event listeners y comunicaci√≥n entre componentes
     * 6. Carga datos previamente guardados si existen
     * 7. Marca el sistema como inicializado y listo
     * 
     * MANEJO DE ERRORES:
     * - Captura y maneja errores de inicializaci√≥n
     * - Proporciona rollback autom√°tico en caso de falla
     * - Emite eventos personalizados para notificaci√≥n externa
     * 
     * @async
     * @returns {Promise<void>}
     * @throws {Error} Si alg√∫n paso de inicializaci√≥n falla
     * @fires window#navbarAppReady - Cuando la inicializaci√≥n est√° completa
     */
    async init() {
        try {
            console.log('üöÄ Iniciando aplicaci√≥n NavBar...');

            // 1. Preservar contenido original para posible restauraci√≥n
            console.log('üíæ Guardando contenido original...');
            this.saveOriginalContent();

            // 2. Crear estructura HTML del sistema NavBar
            console.log('üèóÔ∏è Creando estructura de aplicaci√≥n...');
            this.createAppStructure();

            // 3. Cargar estilos CSS espec√≠ficos
            console.log('üé® Cargando estilos...');
            await this.loadStyles();

            // 4. Inicializar todos los componentes principales
            console.log('‚öôÔ∏è Inicializando componentes...');
            this.initializeComponents();

            // 5. Configurar eventos y comunicaci√≥n entre componentes
            console.log('üîó Configurando eventos...');
            this.setupEvents();

            // 6. Cargar datos previamente guardados
            console.log('üìÇ Cargando datos guardados...');
            this.loadSavedData();

            // 7. Marcar como inicializado y emitir evento
            this.initialized = true;
            console.log('‚úÖ Aplicaci√≥n NavBar inicializada correctamente');

            // Emitir evento personalizado para notificar inicializaci√≥n completa
            window.dispatchEvent(new CustomEvent('navbarAppReady', {
                detail: { navBarApp: this }
            }));

        } catch (error) {
            console.error('‚ùå Error inicializando aplicaci√≥n NavBar:', error);
            this.handleInitializationError(error);
            throw error; // Re-lanzar para manejo externo si es necesario
        }
    }

    // ============================================
    // GESTI√ìN DE CONTENIDO ORIGINAL
    // ============================================

    /**
     * Preserva el contenido original de la p√°gina para restauraci√≥n posterior
     * 
     * PROP√ìSITO:
     * - Mantiene una copia del HTML original antes de la transformaci√≥n NavBar
     * - Permite restaurar completamente el estado original si es necesario
     * - Oculta elementos del sistema legacy durante el uso del NavBar
     * 
     * FUNCIONAMIENTO:
     * 1. Busca el contenedor principal de la ficha original
     * 2. Crea una copia profunda (cloneNode) del contenido
     * 3. Oculta la ficha original y controles legacy
     * 4. Preserva la copia para restauraci√≥n futura
     * 
     * ELEMENTOS GESTIONADOS:
     * - #fichaContainer: Contenedor principal de la ficha legacy
     * - .export-controls: Controles de exportaci√≥n originales
     * 
     * @returns {void}
     */
    saveOriginalContent() {
        console.log('üíæ Preservando contenido original...');
        
        // Buscar y preservar contenedor principal
        const fichaContainer = document.getElementById('fichaContainer');
        if (fichaContainer) {
            // Crear copia profunda del contenido original
            this.originalContent = fichaContainer.cloneNode(true);
            // Ocultar la ficha original
            fichaContainer.style.display = 'none';
            console.log('‚úÖ Ficha original preservada y ocultada');
        } else {
            console.warn('‚ö†Ô∏è No se encontr√≥ fichaContainer');
        }

        // Ocultar controles de exportaci√≥n legacy
        const exportControls = document.querySelector('.export-controls');
        if (exportControls) {
            exportControls.style.display = 'none';
            console.log('‚úÖ Controles de exportaci√≥n legacy ocultados');
        } else {
            console.warn('‚ö†Ô∏è No se encontraron controles de exportaci√≥n');
        }
    }

    // ============================================
    // CREACI√ìN DE ESTRUCTURA HTML
    // ============================================

    /**
     * Crea la estructura HTML completa para la aplicaci√≥n NavBar
     * 
     * PROP√ìSITO:
     * - Genera el contenedor principal y estructura base del sistema NavBar
     * - Establece las √°reas para navegaci√≥n, contenido y componentes
     * - Proporciona la base HTML sobre la cual operan todos los componentes
     * 
     * ESTRUCTURA GENERADA:
     * ```
     * <div id="navbarApp">
     *   <div id="navbarContainer"><!-- NavBar component --></div>
     *   <div id="mainContent"><!-- Vista content --></div>
     * </div>
     * ```
     * 
     * INTEGRACI√ìN:
     * - Se inserta en el body despu√©s del contenido original
     * - Proporciona IDs espec√≠ficos para que los componentes se anclen
     * - Establece estructura sem√°ntica para CSS y JavaScript
     * 
     * @returns {void}
     */
    createAppStructure() {
        console.log('üèóÔ∏è Creando estructura HTML de la aplicaci√≥n...');
        // Definir estructura HTML del sistema NavBar
        const appHTML = `
            <div id="navbarApp" class="navbar-app">
                <!-- Contenedor para el componente NavBar -->
                <div id="navbarContainer"></div>
                
                <!-- √Årea principal de contenido de vistas -->
                <div id="navbarContentArea" class="navbar-content-area">
                    <!-- Contenedor donde se renderizan las vistas (Vista1-4) -->
                    <div id="viewContainer" class="view-container"></div>
                </div>
            </div>
        `;

        // Insertar estructura en el DOM
        document.body.insertAdjacentHTML('beforeend', appHTML);
        console.log('‚úÖ Estructura HTML creada e insertada en el DOM');
    }

    // ============================================
    // CARGA DE ESTILOS CSS
    // ============================================

    /**
     * Carga los estilos CSS espec√≠ficos del sistema NavBar
     * 
     * PROP√ìSITO:
     * - Carga din√°micamente los estilos necesarios para el NavBar
     * - Gestiona la carga as√≠ncrona para evitar bloqueos
     * - Proporciona manejo de errores para estilos faltantes
     * 
     * FUNCIONAMIENTO:
     * 1. Crea elemento <link> din√°micamente
     * 2. Configura la ruta al archivo de estilos
     * 3. Maneja eventos de carga y error
     * 4. Resuelve la promesa cuando los estilos est√°n listos
     * 
     * ARCHIVO CARGADO:
     * - src/navbar-styles.css: Estilos espec√≠ficos del NavBar
     * 
     * @async
     * @returns {Promise<void>} Promesa que se resuelve cuando los estilos est√°n cargados
     * @throws {Error} Si hay problemas cargando los estilos
     */
    async loadStyles() {
        console.log('üé® Cargando estilos CSS del NavBar...');
        
        return new Promise((resolve, reject) => {
            // Crear elemento link para cargar CSS
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.href = 'src/navbar-styles.css';
            
            // Manejar carga exitosa
            link.onload = () => {
                console.log('‚úÖ Estilos NavBar cargados correctamente');
                resolve();
            };
            
            // Manejar errores de carga
            link.onerror = () => {
                console.error('‚ùå Error cargando estilos NavBar');
                reject(new Error('Error cargando estilos del NavBar'));
            };
            
            // Insertar en el head del documento
            document.head.appendChild(link);
        });
    }

    // ============================================
    // INICIALIZACI√ìN DE COMPONENTES
    // ============================================

    /**
     * Inicializa todos los componentes principales del sistema NavBar
     * 
     * PROP√ìSITO:
     * - Crea e inicializa las instancias de todos los componentes principales
     * - Establece las conexiones y dependencias entre componentes
     * - Configura el orden correcto de inicializaci√≥n
     * 
     * ORDEN DE INICIALIZACI√ìN:
     * 1. ViewManager: Gestor de vistas (Vista1-4)
     * 2. DataManager: Gestor de datos y persistencia
     * 3. NavBar: Componente de navegaci√≥n (depende de ViewManager)
     * 
     * DEPENDENCIAS:
     * - ViewManager necesita el contenedor de vistas
     * - DataManager necesita referencia al ViewManager
     * - NavBar necesita ViewManager para navegaci√≥n y callback de cambio de vista
     * 
     * EXPOSICI√ìN GLOBAL:
     * - Componentes se exponen globalmente para acceso desde sistema legacy
     * 
     * @returns {void}
     * @throws {Error} Si alg√∫n componente falla en su inicializaci√≥n
     */
    initializeComponents() {
        console.log('‚öôÔ∏è Inicializando componentes principales...');
        
        try {
            // 1. Inicializar ViewManager (gestor de vistas)
            console.log('üìã Inicializando ViewManager...');
            this.viewManager = new ViewManager();
            const viewContainer = document.getElementById('viewContainer');
            if (!viewContainer) {
                throw new Error('Contenedor de vistas no encontrado');
            }
            this.viewManager.init(viewContainer);

            // 2. Inicializar DataManager (gestor de datos)
            console.log('üíæ Inicializando DataManager...');
            this.dataManager = new DataManager();
            this.dataManager.init(this.viewManager);

            // 3. Inicializar NavBar (componente de navegaci√≥n)
            console.log('üß≠ Inicializando NavBar...');
            this.navbar = new NavBar();
            const navbarContainer = document.getElementById('navbarContainer');
            if (!navbarContainer) {
                throw new Error('Contenedor del NavBar no encontrado');
            }
            this.navbar.init(navbarContainer, (viewName) => {
                this.handleViewChange(viewName);
            });

            // Exponer componentes globalmente para compatibilidad y debugging
            window.NavBarApp = this;
            window.NavBarViewManager = this.viewManager;
            window.NavBarDataManager = this.dataManager;
            
            // Compatibilidad con sistema legacy
            window.DataManager = this.dataManager;
            window.dataManager = this.dataManager;
            
            // Funci√≥n global para resetear (√∫til para debugging)
            window.resetToDefaults = () => this.dataManager.resetToDefaults();
            
            console.log('‚úÖ Todos los componentes inicializados correctamente');
            
        } catch (error) {
            console.error('‚ùå Error inicializando componentes:', error);
            throw error;
        }
    }

    // ============================================
    // CONFIGURACI√ìN DE EVENTOS
    // ============================================

    /**
     * Configura todos los eventos de la aplicaci√≥n NavBar
     * 
     * PROP√ìSITO:
     * - Establece auto-guardado peri√≥dico de datos
     * - Configura eventos de ventana (resize, beforeunload)
     * - Maneja atajos de teclado y eventos globales
     * 
     * EVENTOS CONFIGURADOS:
     * 1. Auto-guardado cada 30 segundos
     * 2. Guardado antes de cerrar la p√°gina
     * 3. Manejo de redimensionamiento de ventana
     * 4. Atajos de teclado para navegaci√≥n
     * 
     * @returns {void}
     */
    setupEvents() {
        console.log('üîó Configurando eventos globales...');
        
        try {
            // 1. Auto-guardado peri√≥dico cada 30 segundos
            setInterval(() => {
                if (this.dataManager) {
                    this.dataManager.saveToLocalStorage();
                    console.log('üíæ Auto-guardado realizado');
                }
            }, 30000);

            // 2. Guardar datos antes de cerrar la p√°gina
            window.addEventListener('beforeunload', () => {
                if (this.dataManager) {
                    this.dataManager.saveToLocalStorage();
                    console.log('üíæ Guardado antes de cerrar p√°gina');
                }
            });

            // 3. Manejar cambios de tama√±o de ventana
            window.addEventListener('resize', () => {
                this.handleResize();
            });

            // 4. Atajos de teclado para navegaci√≥n
            document.addEventListener('keydown', (e) => {
                this.handleKeyboardShortcuts(e);
            });
            
            console.log('‚úÖ Eventos configurados correctamente');
            
        } catch (error) {
            console.error('‚ùå Error configurando eventos:', error);
        }
    }

    // ============================================
    // MANEJO DE CAMBIOS DE VISTA
    // ============================================

    /**
     * Maneja el cambio de vista en el sistema NavBar
     * 
     * PROP√ìSITO:
     * - Coordina el cambio entre vistas (Vista1, Vista2, Vista3, Vista4)
     * - Aplica animaciones de transici√≥n
     * - Actualiza el estado de navegaci√≥n
     * 
     * FUNCIONAMIENTO:
     * 1. Utiliza ViewManager para cambiar la vista activa
     * 2. Aplica clase CSS para animaci√≥n de transici√≥n
     * 3. Remueve la clase despu√©s de la animaci√≥n
     * 
     * @param {string} viewName - Nombre de la vista a mostrar ('vista1', 'vista2', etc.)
     * @returns {void}
     */
    handleViewChange(viewName) {
        console.log(`üîÑ Cambiando a vista: ${viewName}`);
        
        if (this.viewManager) {
            // Cambiar vista usando ViewManager
            this.viewManager.showView(viewName);
            
            // Aplicar animaci√≥n de transici√≥n
            const viewContainer = document.getElementById('viewContainer');
            if (viewContainer) {
                viewContainer.classList.add('view-transition');
                setTimeout(() => {
                    viewContainer.classList.remove('view-transition');
                }, 300);
            }
            
            console.log(`‚úÖ Vista cambiada a: ${viewName}`);
        } else {
            console.error('‚ùå ViewManager no disponible para cambio de vista');
        }
    }

    /**
     * Carga datos guardados previamente
     */
    loadSavedData() {
        if (this.dataManager) {
            this.dataManager.loadFromLocalStorage();
        }

        // Restaurar vista activa
        if (this.navbar) {
            this.navbar.restoreActiveView();
        }
    }

    /**
     * Maneja errores de inicializaci√≥n
     * @param {Error} error - Error ocurrido
     */
    handleInitializationError(error) {
        console.error('Error de inicializaci√≥n:', error);
        
        // Mostrar mensaje de error al usuario
        const errorHTML = `
            <div class="navbar-error">
                <h3>Error inicializando NavBar</h3>
                <p>Ha ocurrido un error al cargar la aplicaci√≥n NavBar:</p>
                <pre>${error.message}</pre>
                <button onclick="location.reload()">Recargar P√°gina</button>
            </div>
        `;

        const errorContainer = document.createElement('div');
        errorContainer.innerHTML = errorHTML;
        errorContainer.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            z-index: 10000;
            text-align: center;
            max-width: 500px;
        `;

        document.body.appendChild(errorContainer);
    }

    /**
     * Maneja cambios de tama√±o de ventana
     */
    handleResize() {
        // Reajustar layout si es necesario
        if (this.initialized) {
            // Aqu√≠ puedes agregar l√≥gica espec√≠fica para responsive
            console.log('Reajustando layout para nuevo tama√±o de ventana');
        }
    }

    /**
     * Maneja teclas de acceso r√°pido
     * @param {KeyboardEvent} e - Evento de teclado
     */
    handleKeyboardShortcuts(e) {
        if (!this.initialized) return;

        // Ctrl/Cmd + n√∫mero para cambiar vista
        if ((e.ctrlKey || e.metaKey) && e.key >= '1' && e.key <= '4') {
            e.preventDefault();
            const viewNumber = parseInt(e.key);
            const viewName = `vista${viewNumber}`;
            this.navbar.navigateToView(viewName);
        }

        // Ctrl/Cmd + S para guardar
        if ((e.ctrlKey || e.metaKey) && e.key === 's') {
            e.preventDefault();
            this.dataManager.saveAllData();
        }

        // Ctrl/Cmd + O para abrir
        if ((e.ctrlKey || e.metaKey) && e.key === 'o') {
            e.preventDefault();
            this.dataManager.loadAllData();
        }

        // Ctrl/Cmd + P para exportar PDF
        if ((e.ctrlKey || e.metaKey) && e.key === 'p') {
            e.preventDefault();
            this.dataManager.exportAllViewsToPDF();
        }

        // Escape para volver a ficha original
        if (e.key === 'Escape') {
            this.toggleOriginalView();
        }
    }

    /**
     * Alterna entre NavBar y vista original
     */
    toggleOriginalView() {
        const navbarApp = document.getElementById('navbarApp');
        const fichaContainer = document.getElementById('fichaContainer');
        const exportControls = document.querySelector('.export-controls');

        if (navbarApp.style.display === 'none') {
            // Mostrar NavBar
            navbarApp.style.display = 'block';
            if (fichaContainer) fichaContainer.style.display = 'none';
            if (exportControls) exportControls.style.display = 'none';
        } else {
            // Mostrar ficha original
            navbarApp.style.display = 'none';
            if (fichaContainer) fichaContainer.style.display = 'block';
            if (exportControls) exportControls.style.display = 'flex';
        }
    }

    /**
     * Obtiene estad√≠sticas de la aplicaci√≥n
     * @returns {Object} Estad√≠sticas
     */
    getAppStats() {
        const stats = {
            initialized: this.initialized,
            currentView: this.viewManager ? this.viewManager.getCurrentView() : null,
            dataStats: this.dataManager ? this.dataManager.getStats() : null,
            activeTime: this.initialized ? Date.now() - this.initTime : 0
        };

        return stats;
    }

    /**
     * Exporta configuraci√≥n de la aplicaci√≥n
     * @returns {Object} Configuraci√≥n
     */
    exportConfig() {
        return {
            version: '1.0',
            timestamp: new Date().toISOString(),
            activeView: this.navbar ? this.navbar.getActiveView() : 'vista1',
            settings: {
                autoSave: true,
                saveInterval: 30000,
                keyboardShortcuts: true
            }
        };
    }

    /**
     * Importa configuraci√≥n de la aplicaci√≥n
     * @param {Object} config - Configuraci√≥n a importar
     */
    importConfig(config) {
        try {
            if (config.activeView && this.navbar) {
                this.navbar.setActiveView(config.activeView);
            }

            console.log('Configuraci√≥n importada correctamente');
        } catch (error) {
            console.error('Error importando configuraci√≥n:', error);
        }
    }

    /**
     * Reinicia la aplicaci√≥n
     */
    restart() {
        this.destroy();
        setTimeout(() => {
            this.init();
        }, 100);
    }

    /**
     * Destruye la aplicaci√≥n y limpia recursos
     */
    destroy() {
        try {
            // Destruir componentes
            if (this.navbar) {
                this.navbar.destroy();
                this.navbar = null;
            }

            if (this.viewManager) {
                this.viewManager.destroy();
                this.viewManager = null;
            }

            if (this.dataManager) {
                this.dataManager.destroy();
                this.dataManager = null;
            }

            // Remover HTML
            const navbarApp = document.getElementById('navbarApp');
            if (navbarApp) {
                navbarApp.remove();
            }

            // Restaurar contenido original
            const fichaContainer = document.getElementById('fichaContainer');
            const exportControls = document.querySelector('.export-controls');
            
            if (fichaContainer) fichaContainer.style.display = 'block';
            if (exportControls) exportControls.style.display = 'flex';

            // Limpiar variables globales
            delete window.NavBarApp;
            delete window.NavBarViewManager;
            delete window.NavBarDataManager;

            this.initialized = false;
            console.log('Aplicaci√≥n NavBar destruida');

        } catch (error) {
            console.error('Error destruyendo aplicaci√≥n:', error);
        }
    }

    /**
     * Verifica si la aplicaci√≥n est√° lista
     * @returns {boolean} True si est√° inicializada
     */
    isReady() {
        return this.initialized;
    }
}

// Hacer disponible globalmente
window.NavBarApp = NavBarApp;

// Auto-inicializaci√≥n cuando se carga el script
document.addEventListener('DOMContentLoaded', () => {
    // La aplicaci√≥n se inicializar√° cuando el usuario haga clic en el bot√≥n NavBar
    console.log('NavBarApp lista para inicializar');
});
